
<!DOCTYPE html>
<html lang="en">
<head>
	<title>Youtube Visualize</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<link href="public/css/style.css" rel="stylesheet">
	<script src="public/js/three.min.js"></script>
	<script src="public/js/Detector.js"></script>
	<script src="public/js/stats.min.js"></script>
	<script src="public/js/jquery-2.1.1.min.js"></script>
	<script src="public/js/accordion.js"></script>
	<script src="public/visuals/globals.js"></script>
	<script src="public/visuals/cylinder.js"></script>
	<script src="public/visuals/circles.js"></script>
	<script src="public/visuals/terrain.js"></script>
	<script src="public/visuals/sphereSpin.js"></script>
	<script src="public/js/OrbitControls.js"></script>
</head>
<body>

	<% include ui.html %>

	<script type="text/javascript">
		if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

		var paused = false;
		var accordion = new TINY.accordion.slider("accordion");
		accordion.init("accordion","h3",true,0,"selected");
		$('#prompt').html("Drop an MP3 or MP4 file");
	//$('#prompt').html("Drop a file or enter a Youtube link " +
	//	"<input id='youtube' type='text' placeholder='Enter a Youtube URL here...'>");
$('#youtube').keydown(function(event) {
	if (event.keyCode == 13) {
		var value = $( this ).val();
		value = "/" + value.match(/\/([^/]*)$/)[1];
		if(value.length > 1) youtubeEntered(value);
	}
});

var visual = TerrainVisual;

var renderer;
var container = document.getElementById( 'container' );
renderer = new THREE.WebGLRenderer();
container.appendChild( renderer.domElement );
visual.init();
audioInit();
onWindowResize();
animate = function() {
	requestAnimationFrame( animate );
	visual.render();
};
animate();
document.addEventListener('drop', onMP3Drop, false);
document.addEventListener('dragover', onDocumentDragOver, false);
window.addEventListener('resize', function() {
	windowHalfX = window.innerWidth / 2;
	windowHalfY = window.innerHeight / 2;
	camera.aspect = window.innerWidth / window.innerHeight;
	camera.updateProjectionMatrix();
	renderer.setSize(window.innerWidth, window.innerHeight);
}, false);
window.addEventListener('resize, onWindowResize', false);

function onWindowResize(event) {
	windowHalfX = window.innerWidth / 2;
	windowHalfY = window.innerHeight / 2;
	camera.aspect = window.innerWidth / window.innerHeight;
	camera.updateProjectionMatrix();
	renderer.setSize(window.innerWidth, window.innerHeight);
}

$('#play-pause').click(function() {
	if(started) {
		if(paused) {
			play();
		}
		else {
			pause();
		}
	}
});
</script>

</body>
</html>

<!--
<!DOCTYPE html>
<html lang="en">
<head>
	<title>Youtube Visualize</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<script src="public/js/three.min.js"></script>
</head>
<body>
	<script>
			var scene = new THREE.Scene();
            var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
 
            var renderer = new THREE.WebGLRenderer();
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);
 
            var cubegeometry = new THREE.CubeGeometry(1,1,1);
            var cubematerial = new THREE.MeshBasicMaterial({wireframe: true, color: 0x00ff00});
 
            var cube = new THREE.Mesh(cubegeometry, cubematerial);
 
            scene.add(cube);
 
            camera.position.z = 5;
 
            var cylindergeometry = new THREE.CylinderGeometry(0.6, 0.6, 2, 50);
            var cylindermaterial = new THREE.MeshBasicMaterial({wireframe: true, color: 0x00ff00});
            var cylinder = new THREE.Mesh(cylindergeometry, cylindermaterial);
 
            cylinder.position.set(2.0,0,0);
            scene.add(cylinder);

            var spheregeometry = new THREE.SphereGeometry(0.8, 16, 16);
            var spherematerial = new THREE.MeshBasicMaterial({wireframe: true, color: 0x00ff00});
            var sphere = new THREE.Mesh(spheregeometry, spherematerial);
 
            sphere.position.set(-2.0, 0, 0);
 
            scene.add(sphere);
 
            var conegeometry = new THREE.CylinderGeometry(0, 0.6, 2, 50, false);
            var conematerial = new THREE.MeshBasicMaterial({wireframe: true, color: 0x00ff00});
            var cone = new THREE.Mesh(conegeometry, conematerial);
            cone.position.set(4.0,0,0);
            scene.add(cone);
 
            var render = function () {
                requestAnimationFrame(render);
 
                cube.rotation.y += 0.01;
                cube.rotation.x += 0.01;
                cube.rotation.z += 0.01;
 
                sphere.rotation.y += 0.01;
 
                cylinder.rotation.y += 0.01;
                cylinder.rotation.x += 0.01;
                cylinder.rotation.z += 0.01;
 
                cone.rotation.y += 0.01;
                cone.rotation.x += 0.01;
 
                renderer.render(scene, camera);
            };
 
            // Calling the render function
            render();
	</script>
</body>
</html>
-->