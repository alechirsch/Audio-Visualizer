
<!DOCTYPE html>
<html lang="en">
<head>
	<title>Youtube Visualize</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<link href="public/css/style.css" rel="stylesheet">
	<script src="public/js/three.min.js"></script>
	<script src="public/js/Detector.js"></script>
	<script src="public/js/stats.min.js"></script>
	<script src="public/js/audio.js"></script>
	<script src="public/js/jquery-2.1.1.min.js"></script>
	<script src="public/js/accordion.js"></script>
</head>
<body>
	<script>
		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
			(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
			m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

		ga('create', 'UA-57622384-1', 'auto');
		ga('send', 'pageview');

	</script>
	<div id="fb-root"></div>
	<script>(function(d, s, id) {
		var js, fjs = d.getElementsByTagName(s)[0];
		if (d.getElementById(id)) return;
		js = d.createElement(s); js.id = id;
		js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&appId=1481292832158179&version=v2.0";
		fjs.parentNode.insertBefore(js, fjs);
	}(document, 'script', 'facebook-jssdk'));</script>
	<div id="container"></div>
	<div id="prompt-contatiner"><div id="prompt"></div></div>
	<div id="tools">
		<div class="fb-share-button" data-href="https://audio-visualizer.herokuapp.com/" data-layout="button_count"></div>
		<ul id="accordion">
			<li id="color">
				<h3>Color</h3>
				<div class="acc-section">
					<div class="acc-content">
						<div id="red-button" class="color-button"></div>
						<div id="orange-button" class="color-button"></div>
						<div id="yellow-button" class="color-button"></div>
						<div id="green-button" class="color-button"></div>
						<div id="blue-button" class="color-button"></div>
						<div id="purple-button" class="color-button"></div>
						<script>
							$("#red-button").click(function(){ 
								$("#slider-color-1").val(0.33);
								$("#slider-color-2").val(1.45);
								$("#slider-color-3").val(2.86);
								$("#slider-color-4").val(3.2);
							});
							$("#orange-button").click(function(){ 
								$("#slider-color-1").val(0.5);
								$("#slider-color-2").val(1.12);
								$("#slider-color-3").val(0.72);
								$("#slider-color-4").val(4.0);
							});
							$("#yellow-button").click(function(){ 
								$("#slider-color-1").val(0.61);
								$("#slider-color-2").val(0.55);
								$("#slider-color-3").val(0.72);
								$("#slider-color-4").val(0.67);
							});
							$("#green-button").click(function(){ 
								$("#slider-color-1").val(3.81);
								$("#slider-color-2").val(4.88);
								$("#slider-color-3").val(0.55);
								$("#slider-color-4").val(3);
							});
							$("#blue-button").click(function(){ 
								$("#slider-color-1").val(10);
								$("#slider-color-2").val(10);
								$("#slider-color-3").val(2.07);
								$("#slider-color-4").val(4.88);
							});
							$("#purple-button").click(function(){ 
								$("#slider-color-1").val(1);
								$("#slider-color-2").val(2.69);
								$("#slider-color-3").val(6.62);
								$("#slider-color-4").val(6.06);
							});
						</script>
					</div>
				</div>
			</li>
			<li id="advanced-color">
				<h3>Advanced Color</h3>
				<div class="acc-section">
					<div class="acc-content">						
						<div class="slider">
							<label>Color 1</label>
							<input id="slider-color-1" type="range" value="1.0" min="0.1" max="10.0" step="0.01" />
						</div>
						<div class="slider">
							<label>Color 2</label>
							<input id="slider-color-2" type="range" value="2.0" min="0.1" max="10.0" step="0.01" />
						</div>
						<div class="slider">
							<label>Color 3</label>
							<input id="slider-color-3" type="range" value="1.0" min="0.1" max="10.0" step="0.01" />
						</div>
						<div class="slider">
							<label>Color 4</label>
							<input id="slider-color-4" type="range" value="3.0" min="0.1" max="10.0" step="0.01" />
						</div>					
						<div class="slider">
							<label>Color Inversion</label>
							<input id="slider-colorInversion" type="range" value="50" min="-800" max="500" step="0.01" />
						</div>
					</div>
				</div>
			</li>
			<li id="shape">
				<h3>Shape</h3>
				<div class="acc-section">
					<div class="acc-content">
						<div class="slider">
							<label>Circles</label>
							<input id="slider-circles" type="range" value="8" min="8" max="1000" step="0.01" />
						</div>
						<div class="slider">
							<label>Vertical Stretch 2</label>
							<input id="slider-verticalStretch-2" type="range" value="2.0" min="0.5" max="2.0" step="0.01" />
						</div>
					</div>
				</div>
			</li>
			<li id="speed">
				<h3>Speed</h3>
				<div class="acc-section">
					<div class="acc-content">
						<div class="slider">
							<label>Speed</label>
							<input id="slider-speed" type="range" value="20" min="1" max="100" step="0.01" />
						</div>
						<div class="slider">
							<label>Horizontal Pulse</label>
							<input id="slider-horizontalPulse" type="range" value="100" min="0" max="100" step="0.01" />
						</div>
					</div>
				</div>
			</li>
			<li id="song">
				<h3>Song</h3>
				<div class="acc-section">
					<div class="acc-content">
						Drop a song or <a id="enter-link">enter a link.</a>
					</div>
				</div>
			</li>

		</ul>
		<div id="sliders">
			<div class="slider">
				<label>Left Off Set</label>
				<input id="slider-leftOffset" type="range" value="175" min="0" max="600" step="0.01" />
			</div>
			<div class="slider">
				<label>Bottom Off Set</label>
				<input id="slider-bottomOffset" type="range" value="220" min="0" max="600" step="0.01" />
			</div>
			<div class="slider">
				<label>Vertical Stretch</label>
				<input id="slider-verticalStretch" type="range" value="400" min="0" max="600" step="0.01" />
			</div>
			<div class="slider">
				<label>Horizontal Stretch</label>
				<input id="slider-horizontalStretch" type="range" value="400" min="-500" max="800" step="0.01" />
			</div>
			<div class="slider">
				<label>Horizontal Stretch 2</label>
				<input id="slider-horizontalStretch-2" type="range" value="2.0" min="0.5" max="3.5" step="0.01" />
			</div>
			<div class="slider">
				<label>Curve</label>
				<input id="slider-curve" type="range" value="0" min="0" max="800" step="0.01" />
			</div>
			<div class="slider">
				<label>Curve Intensity</label>
				<input id="slider-curveIntensity" type="range" value="0" min="0" max="800" step=".01" />
			</div>
			<div class="slider">
				<label>Gradient Size??</label>
				<input id="slider-size" type="range" value="800" min="500" max="1500" step="0.01" />
			</div>		
			<div class="slider">
				<label>Line Distortion</label>
				<input id="slider-lineDistortion" type="range" value="100" min="0" max="1000" step="0.01" />
			</div>
			<div class="slider">
				<label>Vertical Wave Distortion</label>
				<input id="slider-verticalWaveDistortion" type="range" value="1" min="0.01" max="2" step="0.01" />
			</div>
			<div class="slider">
				<label>Unknown</label>
				<input id="slider-unknown" type="range" value="1" min="0" max="20" step="0.01" />
			</div>


		</div>
	</div>

	<script id="vertexShader" type="x-shader/x-vertex">

		void main()	{

			gl_Position = vec4( position, 1.0 );

		}

	</script>



	<script>
		/*from http://airtightinteractive.com/demos/js/reactive/	*/
		if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

		var accordion = new TINY.accordion.slider("accordion");
		accordion.init("accordion","h3",true,0,"selected");
		$('#prompt').html("Drop a file or enter a Youtube link " +
			"<input id='youtube' type='text' placeholder='Enter a Youtube URL here...'>");
		$('#youtube').keydown(function(event) {
			if (event.keyCode == 13) {
				var value = $( this ).val();
				value = "/" + value.match(/\/([^/]*)$/)[1];
				if(value.length > 1) youtubeEntered(value);
			}
		});

$('#enter-link').click(function(){
	$('#prompt').html("<input id='youtube' type='text' placeholder='Enter a Youtube URL here...'>").show();
	fadePrompt();

});

var timer;
$(document).mousemove(function() {
	if (timer) {
		clearTimeout(timer);
		timer = 0;
	}

	$("#tools").fadeIn();
	timer = setTimeout(function() {
		$('#tools').fadeOut()
	}, 1500)
})

var container, stats;

var camera, scene, renderer;

var uniforms;
var source;
var analyser;
var buffer;
var audioBuffer;
var dropArea;
var audioContext;
var source;
var analyser;
var xhr;
var started = false;
var paused = false;


init();
animate();

function init() {



	try {
		window.AudioContext = window.AudioContext || window.webkitAudioContext;
		audioContext = new window.AudioContext();
	} catch(e) {
		return;
	}

	window.addEventListener('touchstart', function() {

		/* create empty buffer */
		var buffer = audioContext.createBuffer(1, 1, 22050);
		var source = audioContext.createBufferSource();
		source.buffer = buffer;

		/* connect to output (your speakers) */
		source.connect(audioContext.destination);

		/* play the file */
		source.noteOn(0);

	}, false);

	/* init audio */
	analyser = audioContext.createAnalyser();
	analyser.smoothingTimeConstant = 0.000001;
	analyser.fftSize = 1024;
	container = document.getElementById( 'container' );

	camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
	camera.position.z = 5;

	scene = new THREE.Scene();

	var geometry = new THREE.PlaneBufferGeometry( 2, 2 );

	var spheregeometry = new THREE.SphereGeometry(0.8, 16, 16);
    var spherematerial = new THREE.MeshBasicMaterial({wireframe: true, color: 0x00ff00});
    var sphere = new THREE.Mesh(spheregeometry, spherematerial);

    sphere.position.set(0, 0, 0);

    scene.add(sphere);

	uniforms = {
		time: { type: "f", value: 1.0 },
		color1: { type: "f", value: 0.0},
		color2: { type: "f", value: 0.0},
		color3: { type: "f", value: 0.0},
		color4: { type: "f", value: 0.0},
		sphereShape: sphere,
		resolution: { type: "v2", value: new THREE.Vector2() }
	};

	var material = new THREE.ShaderMaterial( {

		uniforms: uniforms,
		vertexShader: document.getElementById( 'vertexShader' ).textContent,
		fragmentShader: document.getElementById( 'fragmentShader' ).textContent

	} );

	var mesh = new THREE.Mesh( geometry, material );
	//scene.add( mesh );

	renderer = new THREE.WebGLRenderer();
	container.appendChild( renderer.domElement );

	onWindowResize();

	document.addEventListener('drop', onMP3Drop, false);
	document.addEventListener('dragover', onDocumentDragOver, false);

	window.addEventListener( 'resize', onWindowResize, false );


	LoopVisualizer.init();

	if(<%= youtube %>){
		loadYoutube('<%= video_id %>');
	}
}

function fadePrompt(){
	setTimeout(function() {
		$('#prompt').fadeOut('slow');
	}, 10000);
}

function getURLParameter(url, name) {
	return (RegExp(name + '=' + '(.+?)(&|$)').exec(url)||[,null])[1];
}

function loading(){
	$('#prompt').text("loading").show();
	var i = 0;
	var interval = setInterval(function() {
		if($('#prompt').is(':hidden')) clearInterval(interval);
		if(i === 5){
			$('#prompt').text('loading');
			i = 0;
		}
		else{
			$('#prompt').append('.');
			i++;
		}
	}, 750);
}


function youtubeEntered(link){
	loading();
	window.location.href = link;

}

function youtubeEntered2(link){
	loading();
	var request = new XMLHttpRequest();
	request.open("GET", link, true);
	request.responseType = "arraybuffer";
	request.send();

	request.onload = function() {
		loadYoutube(getURLParameter(link, 'v'));
	};
}

function loadYoutube(link) {
	loading();
	var url = "public/" + link + ".mp4";
	console.log(url);
	var request = new XMLHttpRequest();
	request.open("GET", url, true);
	request.responseType = "arraybuffer";
	request.send();
	request.onload = function() {
		audioContext.decodeAudioData(request.response, function(buffer) {
			audioBuffer = buffer;
			startSound();
		}, function(e) {
			console.log(e);
		});
	};
};

function loadSampleAudio() {
	loading();
	var audioURL = "public/cohkka.mp3";

	/* Load asynchronously */
	var request = new XMLHttpRequest();
	request.open("GET", audioURL, true);
	request.responseType = "arraybuffer";

	request.onload = function() {
		audioContext.decodeAudioData(request.response, function(buffer) {
			audioBuffer = buffer;
			startSound();
		}, function(e) {
			$('#prompt').text("error loading mp3").show();
			console.log(e);
		});
	};
	request.send();
}

function onDocumentDragOver(evt) {
	evt.stopPropagation();
	evt.preventDefault();
	return false;
}

function onDroppedMP3Loaded(data) {
	audioContext.decodeAudioData(data, function(buffer) {
		audioBuffer = buffer;
		startSound();
	}, function(e) {
		$('#prompt').text("cannot decode mp3").show();
		console.log(e);
	});
}

function onMP3Drop(evt) {
	evt.stopPropagation();
	evt.preventDefault();

	loading();

	var droppedFiles = evt.dataTransfer.files;
	var reader = new FileReader();
	reader.onload = function(fileEvent) {
		var data = fileEvent.target.result;
		onDroppedMP3Loaded(data);
	};
	reader.readAsArrayBuffer(droppedFiles[0]);
}

function startSound() {

	if (source){
		source.stop(0.0);
		source.disconnect();
	}

	/* Connect audio processing graph */
	source = audioContext.createBufferSource();	
	source.connect(audioContext.destination);
	source.connect(analyser);

	$('#prompt').fadeOut('slow');
	source.buffer = audioBuffer;
	source.loop = false;
	source.start(0.0);
	/*startViz();*/
}

function pause(){
	paused = true;
	source.mediaElement.pause();
}

function play(){
	pause = false;
	source.mediaElement.play();
}

function onWindowResize(event) {
	windowHalfX = window.innerWidth / 2;
	windowHalfY = window.innerHeight / 2;
	camera.aspect = window.innerWidth / window.innerHeight;
	camera.updateProjectionMatrix();
	renderer.setSize(window.innerWidth, window.innerHeight);
}



/*** END FROM http://airtightinteractive.com/demos/js/reactive/ ***/

function onWindowResize( event ) {

	uniforms.resolution.value.x = window.innerWidth;
	uniforms.resolution.value.y = window.innerHeight;

	renderer.setSize( window.innerWidth, window.innerHeight );

}



function animate() {

	requestAnimationFrame( animate );

	render();
	/*stats.update();*/

}
var temp = 1;
function render() {
	LoopVisualizer.update(source);

	//uniforms.sphereShape.scale.multiplyScalar((1 / temp));
	temp = LoopVisualizer.parameters.sphereScale;
	//uniforms.sphereShape.scale.multiplyScalar(LoopVisualizer.parameters.sphereScale);
	uniforms.sphereShape.rotation.x += LoopVisualizer.parameters.sphereScaleX;
	uniforms.sphereShape.rotation.y += LoopVisualizer.parameters.sphereScaleY;
	uniforms.sphereShape.rotation.z += LoopVisualizer.parameters.sphereScaleZ;



	uniforms.time.value += 0.05;
			if(uniforms.color1.value !== document.getElementById('slider-color-1').value || uniforms.color2.value !== document.getElementById('slider-color-2').value || uniforms.color3.value !== document.getElementById('slider-color-3').value || uniforms.color4.value !== document.getElementById('slider-color-4').value){
				console.log("color 1 = " + document.getElementById('slider-color-1').value);
				console.log("color 2 = " + document.getElementById('slider-color-2').value);
				console.log("color 3 = " + document.getElementById('slider-color-3').value);
				console.log("color 4 = " + document.getElementById('slider-color-4').value);
			}
			uniforms.color1.value = document.getElementById('slider-color-1').value;
			uniforms.color2.value = document.getElementById('slider-color-2').value;
			uniforms.color3.value = document.getElementById('slider-color-3').value;
			uniforms.color4.value = document.getElementById('slider-color-4').value;
			renderer.render( scene, camera );

		}

	</script>

</body>
</html>

<!--
<!DOCTYPE html>
<html lang="en">
<head>
	<title>Youtube Visualize</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<script src="public/js/three.min.js"></script>
</head>
<body>
	<script>
			var scene = new THREE.Scene();
            var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
 
            var renderer = new THREE.WebGLRenderer();
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);
 
            var cubegeometry = new THREE.CubeGeometry(1,1,1);
            var cubematerial = new THREE.MeshBasicMaterial({wireframe: true, color: 0x00ff00});
 
            var cube = new THREE.Mesh(cubegeometry, cubematerial);
 
            scene.add(cube);
 
            camera.position.z = 5;
 
            var cylindergeometry = new THREE.CylinderGeometry(0.6, 0.6, 2, 50);
            var cylindermaterial = new THREE.MeshBasicMaterial({wireframe: true, color: 0x00ff00});
            var cylinder = new THREE.Mesh(cylindergeometry, cylindermaterial);
 
            cylinder.position.set(2.0,0,0);
            scene.add(cylinder);

            var spheregeometry = new THREE.SphereGeometry(0.8, 16, 16);
            var spherematerial = new THREE.MeshBasicMaterial({wireframe: true, color: 0x00ff00});
            var sphere = new THREE.Mesh(spheregeometry, spherematerial);
 
            sphere.position.set(-2.0, 0, 0);
 
            scene.add(sphere);
 
            var conegeometry = new THREE.CylinderGeometry(0, 0.6, 2, 50, false);
            var conematerial = new THREE.MeshBasicMaterial({wireframe: true, color: 0x00ff00});
            var cone = new THREE.Mesh(conegeometry, conematerial);
            cone.position.set(4.0,0,0);
            scene.add(cone);
 
            var render = function () {
                requestAnimationFrame(render);
 
                cube.rotation.y += 0.01;
                cube.rotation.x += 0.01;
                cube.rotation.z += 0.01;
 
                sphere.rotation.y += 0.01;
 
                cylinder.rotation.y += 0.01;
                cylinder.rotation.x += 0.01;
                cylinder.rotation.z += 0.01;
 
                cone.rotation.y += 0.01;
                cone.rotation.x += 0.01;
 
                renderer.render(scene, camera);
            };
 
            // Calling the render function
            render();
	</script>
</body>
</html>
-->