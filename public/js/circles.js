if ( ! Detector.webgl ) Detector.addGetWebGLMessage();


var stats;

var camera, scene;

var parameters;

var SEGMENTS = 512;
var BIN_COUNT = 512;
var analyser, source, buffer, audioBuffer, dropArea, audioContext, freqByteData, timeByteData;
var min = 0, sum = 0, max = 255 * 20;
var counter = 0;
var circleArray = [];
var colorArray2 = [0x330000, 0x331a1a, 0x4c0000, 0x660000, 0x806060, 0x994d4d, 0xe53939, 0xe57373, 0xf20000, 0xff0000, 0xffbfbf, 0x594643, 0x734139, 0x7f1100, 0xb23e2d, 0xbf1a00, 0xbf6c60, 0xd9aaa3, 0x330e00, 0x4c2213, 0x664133, 0x73341d, 0x806860, 0x8c5946, 0xa64b29, 0xf29979, 0xff4400, 0xffd0bf, 0xff7340, 0x402310, 0x593116, 0x735039, 0x732e00, 0x993d00, 0x996b4d, 0xa65b29, 0xbfa38f, 0xcc5200, 0xd97736, 0xe5a173, 0xff6600, 0x403830, 0x66421a, 0x665a4d, 0x8c6c46, 0x8c4b00, 0x998773, 0xbf7c30, 0xbf6600, 0xf2ba79, 0xff8800, 0xffe1bf, 0x332200, 0x403520, 0x4c3913, 0x665533, 0x7f6020, 0x99804d, 0x996600, 0xbf8f30, 0xccbb99, 0xd9b56c, 0xd99100, 0xffbf40, 0x8c7000, 0xd9b836, 0xffcc00, 0x333000, 0x4c4a26, 0x595300, 0x7f7b40, 0x8c8523, 0x8c8a69, 0xb2ad59, 0xe5de73, 0xf2e200, 0xc2cc33, 0x526600, 0x85a600, 0xb6bf8f, 0xb8cc66, 0xb8e600, 0xe6f2b6, 0x394d13, 0x525943, 0x2d3326, 0x448000, 0x7fa653, 0x6dcc00, 0xbaf279, 0x88ff00, 0x1c330d, 0x507339, 0x6c8060, 0x084000, 0x24661a, 0x6cbf60, 0x90ff80, 0xb6f2b6, 0x009914, 0x00d91d, 0x1a3320, 0x165928, 0x86b392, 0x394d41, 0x238c4d, 0x59b37d, 0x00bf4d, 0x004022, 0x33664e, 0x468c6c, 0x36d98d, 0x00ff88, 0xbfffe1, 0x608075, 0x104036, 0x53a695, 0x86b3aa, 0x30bfa3, 0x00f2c2, 0x80ffe5, 0x394d4b, 0x00665f, 0xb6f2ee, 0x0d3033, 0x005359, 0x396f73, 0x698a8c, 0x269199, 0x33c2cc, 0x00eeff, 0x003d4d, 0x005c73, 0x8fb6bf, 0x33adcc, 0xbff2ff, 0x80e6ff, 0x1a2b33, 0x39464d, 0x004466, 0x267399, 0x738c99, 0x5995b3, 0x0088cc, 0x39ace6, 0x80d5ff, 0x0d2133, 0x00294d, 0x003d73, 0x406280, 0x235b8c, 0x005299, 0xa3bfd9, 0x26364d, 0x597db3, 0x8698b3, 0x3370cc, 0x0061f2, 0x80b3ff, 0x000e33, 0x00144d, 0x233f8c, 0x80a2ff, 0xbfd0ff, 0x2d3359, 0x434659, 0x1a2466, 0x404880, 0x293aa6, 0x001bcc, 0x000059, 0x737399, 0x6666cc, 0x0000f2, 0x3d3df2, 0xbfbfff, 0x1d1a33, 0x140099, 0x9180ff, 0x110040, 0x1f0073, 0x392080, 0x1c0d33, 0x2b2633, 0x2a134d, 0x36264d, 0x6930bf, 0xb8a3d9, 0x44394d, 0x7f53a6, 0xb073e6, 0x9539e6, 0x8800ff, 0x553366, 0x440066, 0x756080, 0x5e008c, 0x6c2080, 0x8d29a6, 0xc200f2, 0x300033, 0x551659, 0xa37ca6, 0xa053a6, 0xce36d9, 0xeeb6f2, 0x331a31, 0xe673de, 0xff00ee, 0x4d003d, 0x4d2645, 0x664d61, 0x733967, 0xa6298d, 0xf23dce, 0x330022, 0x8c2369, 0xbf609f, 0x4d1332, 0x7f0044, 0x994d75, 0xb32d74, 0xb3869e, 0xf23d9d, 0xff80c4, 0xffbfe1, 0x330014, 0x40202d, 0x4c001f, 0x733950, 0xa60042, 0x4d393e, 0x590018, 0x7f2039, 0x990029, 0xb35971, 0xe53967, 0xff80a2, 0x332628, 0x592d33, 0x8c0013, 0xb3868c, 0xe53950];
var colorArray = [0xfa1e34, 0xfa6171, 0xd4192c, 0xd47982, 0xfa1e4a, 0xfa7892, 0xe02f53, 0xed87a6, 0xe05881, 0xd42c5f, 0xfa1e76, 0xfa619e, 0xe06c9a, 0xd42c6f, 0xfa8ec4, 0xed1c85, 0xfa4bb4, 0xe01b91, 0xd466a8, 0xfa78d3, 0xd440a7, 0xe01bb9, 0xe080cd, 0xe058d3, 0xfa61fa, 0xed1ced, 0xed87ed, 0xc119d4, 0xba53d4, 0xc54bfa, 0xaf1ced, 0xc380e0, 0xc678fa, 0x912cd4, 0xa866d4, 0x9c58e0, 0xb98efa, 0x7034fa, 0x7243e0, 0x9479d4, 0x9278fa, 0x7c66d4, 0x341efa, 0x7161fa, 0x998efa, 0x2f2fe0, 0x6c77e0, 0x1e4afa, 0x4b6efa, 0x879ced, 0x2c4ed4, 0x2c5fd4, 0x7994d4, 0x619efa, 0x8eb9fa, 0x327ded, 0x407bd4, 0x669dd4, 0x34abfa, 0x5cb3ed, 0x80bae0, 0x1989d4, 0x47bbed, 0x80c3e0, 0x61dbfa, 0x80cde0, 0x19aed4, 0x61ebfa, 0x19c1d4, 0x34fafa, 0x80e0e0, 0x8efaef, 0x1cedd8, 0x53d4c7, 0x8efada, 0x47edbb, 0x79d4b8, 0x66d4a8, 0x34fa97, 0x8efac4, 0x43e092, 0x1efa60, 0x2fe064, 0x80e09d, 0x87ed91, 0x2cd42c, 0x7eed72, 0x60fa1e, 0x87d466, 0xb9fa8e, 0x8fed32, 0x8ad440, 0xbdfa61, 0xafd479, 0xafed1c, 0xadd453, 0xe0fa78, 0xb2d42c, 0xe6fa34, 0xcbd479, 0xe0e02f, 0xe0e06c, 0xfae41e, 0xd4c119, 0xfad234, 0xfadb61, 0xd4b22c, 0xd4c179, 0xfab81e, 0xfada8e, 0xedc25c, 0xd49c19, 0xd4b366, 0xfaab34, 0xfabd61, 0xedc487, 0xd48919, 0xfab978, 0xed8f32, 0xe0b080, 0xd48a3f, 0xfa761e, 0xfab98e, 0xe0762f, 0xe08e58, 0xfa8f61, 0xed6a32, 0xeda687, 0xd46c3f, 0xfa4a1e, 0xed6847, 0xed8b72, 0xd43f19, 0xd48b79, 0xfa998e, 0xe05343, 0xfa1e1e, 0xfa6161, 0xd41919, 0xd46666];
var colorArray3 = [0xfa1e1e, 0xfa6161, 0xd41919, 0xd46666, 0xfa998e, 0xe05343, 0xfa4a1e, 0xed6847, 0xed8b72, 0xd43f19, 0xd48b79, 0xfa8f61, 0xed6a32, 0xeda687, 0xd46c3f, 0xfa761e, 0xfab98e, 0xe0762f, 0xe08e58, 0xfab978, 0xed8f32, 0xe0b080, 0xd48a3f, 0xfaab34, 0xfabd61, 0xedc487, 0xd48919, 0xfab81e, 0xfada8e, 0xedc25c, 0xd49c19, 0xd4b366, 0xfad234, 0xfadb61, 0xd4b22c, 0xd4c179, 0xfae41e, 0xd4c119, 0xe0e02f, 0xe0e06c, 0xe6fa34, 0xcbd479, 0xe0fa78, 0xb2d42c, 0xafed1c, 0xadd453, 0xbdfa61, 0xafd479, 0x8fed32, 0x8ad440, 0xb9fa8e, 0x60fa1e, 0x87d466, 0x7eed72, 0x2cd42c, 0x87ed91, 0x1efa60, 0x2fe064, 0x80e09d, 0x34fa97, 0x8efac4, 0x43e092, 0x66d4a8, 0x8efada, 0x47edbb, 0x79d4b8, 0x8efaef, 0x1cedd8, 0x53d4c7, 0x34fafa, 0x80e0e0, 0x61ebfa, 0x19c1d4, 0x61dbfa, 0x80cde0, 0x19aed4, 0x47bbed, 0x80c3e0, 0x34abfa, 0x5cb3ed, 0x80bae0, 0x1989d4, 0x669dd4, 0x619efa, 0x8eb9fa, 0x327ded, 0x407bd4, 0x2c5fd4, 0x7994d4, 0x1e4afa, 0x4b6efa, 0x879ced, 0x2c4ed4, 0x6c77e0, 0x2f2fe0, 0x341efa, 0x7161fa, 0x998efa, 0x9278fa, 0x7c66d4, 0x7034fa, 0x7243e0, 0x9479d4, 0xb98efa, 0x9c58e0, 0xc678fa, 0x912cd4, 0xa866d4, 0xc54bfa, 0xaf1ced, 0xc380e0, 0xba53d4, 0xc119d4, 0xfa61fa, 0xed1ced, 0xed87ed, 0xe058d3, 0xe01bb9, 0xe080cd, 0xfa78d3, 0xd440a7, 0xfa4bb4, 0xe01b91, 0xd466a8, 0xfa8ec4, 0xed1c85, 0xfa1e76, 0xfa619e, 0xe06c9a, 0xd42c6f, 0xed87a6, 0xe05881, 0xd42c5f, 0xfa1e4a, 0xfa7892, 0xe02f53, 0xfa1e34, 0xfa6171, 0xd4192c, 0xd47982];

function init() {
	try {
		window.AudioContext = window.AudioContext || window.webkitAudioContext;
		audioContext = new window.AudioContext();
	} catch(e) {
		return;
	}
	window.addEventListener('touchstart', function() {
		/* create empty buffer */
		var buffer = audioContext.createBuffer(1, 1, 22050);
		var source = audioContext.createBufferSource();
		source.buffer = buffer;
		/* connect to output (your speakers) */
		source.connect(audioContext.destination);
		/* play the file */
		source.noteOn(0);
	}, false);

	/* init audio */
	analyser = audioContext.createAnalyser();
	analyser.smoothingTimeConstant = 0.01;
	analyser.fftSize = 1024;

	/*start ThreeJS scene*/
	camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
	camera.position.x = 130;
	camera.position.y = 215;
	camera.position.z = 316;
	camera.lookAt(new THREE.Vector3(0, 0, 0));

	controls = new THREE.OrbitControls( camera );
	controls.damping = 0.2;
	controls.addEventListener( 'change', render );

	scene = new THREE.Scene();
	/*To use enter the axis length*/
	var debugaxis = function(axisLength){
		/*Shorten the vertex function*/
		function v(x,y,z){ 
			return new THREE.Vector3(x,y,z);
		}

		/*Create axis (point1, point2, colour)*/
		function createAxis(p1, p2, color){
			var line, lineGeometry = new THREE.Geometry(),
			lineMat = new THREE.LineBasicMaterial({color: color, lineWidth: 1});
			lineGeometry.vertices.push(p1, p2);
			line = new THREE.Line(lineGeometry, lineMat);
			scene.add(line);
		}

		createAxis(v(-axisLength, 0, 0), v(axisLength, 0, 0), 0xFF0000);
		createAxis(v(0, -axisLength, 0), v(0, axisLength, 0), 0x00FF00);
		createAxis(v(0, 0, -axisLength), v(0, 0, axisLength), 0x0000FF);
	};

	//debugaxis(100);

	var material = new THREE.MeshBasicMaterial({color: 0xff00});
	var geometry = new THREE.PlaneBufferGeometry( 200, 200 );
	var plane = new THREE.Mesh(geometry, material);
	plane.position.set(0,0,0);
	plane.rotation.x = -Math.PI/2;
	plane.rotation.y = 0;
	//scene.add(plane);


	var material = new THREE.LineBasicMaterial({color: 0x0000ff});
	var radius = 1;
	var segments = 20;

	var circleGeometry = new THREE.CircleGeometry( radius, segments );				
	var circle = new THREE.Line( circleGeometry, material );
	circleGeometry.vertices.shift();
	circle.position.set(0, 0, 0);
	circle.rotation.x = -Math.PI/2;
	circle.rotation.y = 0;
	scene.add( circle );
	circleArray[0] = circle;
	parameters = {
		newHeight: 0
	};

	createCircles(2, 20);

	audioInit();
}

function createCircles(radius, segments){
	if(radius > 250) return;
	var circleGeometry = new THREE.CircleGeometry( radius, segments );	
	var circleMaterial = new THREE.LineBasicMaterial({color: 0x0000ff});				
	var circle = new THREE.Line( circleGeometry, circleMaterial );
	circleGeometry.vertices.shift();
	circle.position.set(0, 1, 0);
	circle.rotation.x = -Math.PI/2;
	circle.rotation.y = 0;
	scene.add( circle );
	circleArray[radius - 1] = circle;
	createCircles(radius + 1, segments + 2);
}

function audioInit(){
	freqByteData = new Uint8Array(analyser.frequencyBinCount);
	timeByteData = new Uint8Array(analyser.frequencyBinCount);
	onParamsChange();
}

function onParamsChange() {
	console.log("I got here");
	/* when a parameter is changed, change it */
}

function normalize(value, max){
	return (value - min) / (max - min);
}

function update() {
	analyser.getByteFrequencyData(freqByteData);
	analyser.getByteTimeDomainData(timeByteData);
	sum = 0;

	for(var i = 0; i < 512; i++){
		sum += freqByteData[i];
	}

	parameters.newHeight = normalize(sum, 512 * 255) * 50;
}

function animate() {

	requestAnimationFrame( animate );

	render();
	/*stats.update();*/

}

function updateCircleColor(index){
	circleArray[index].material.color.setHex(colorArray[Math.floor(normalize(circleArray[index].position.y, 50)*colorArray.length)]);
}

function updateCircleHeights(index){
	if(index === 0){
		circleArray[index].position.y = parameters.newHeight;
		updateCircleColor(index);
		return;
	}
	circleArray[index].position.y = circleArray[index - 1].position.y;
	updateCircleColor(index);
	updateCircleHeights(index - 1);
}

function render() {
	update(source);

	updateCircleHeights(circleArray.length - 1);

	//console.log(camera.position.x+","+ camera.position.y+","+ camera.position.z);
	//parameters.time.value += 0.05;1
	renderer.render( scene, camera );
}