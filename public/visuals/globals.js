var stats;

var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
var scene;

var parameters;

var SEGMENTS = 512;
var BIN_COUNT = 512;
var analyser;
var source;
var buffer;
var audioBuffer;
var dropArea;
var audioContext;

var freqByteData;
var timeByteData;

var sum = 0;
//colors from http://phrogz.net/css/distinct-colors.html
var rainbowColors1 = [0xfa1e34, 0xfa6171, 0xd4192c, 0xd47982, 0xfa1e4a, 0xfa7892, 0xe02f53, 0xed87a6, 0xe05881, 0xd42c5f, 0xfa1e76, 0xfa619e, 0xe06c9a, 0xd42c6f, 0xfa8ec4, 0xed1c85, 0xfa4bb4, 0xe01b91, 0xd466a8, 0xfa78d3, 0xd440a7, 0xe01bb9, 0xe080cd, 0xe058d3, 0xfa61fa, 0xed1ced, 0xed87ed, 0xc119d4, 0xba53d4, 0xc54bfa, 0xaf1ced, 0xc380e0, 0xc678fa, 0x912cd4, 0xa866d4, 0x9c58e0, 0xb98efa, 0x7034fa, 0x7243e0, 0x9479d4, 0x9278fa, 0x7c66d4, 0x341efa, 0x7161fa, 0x998efa, 0x2f2fe0, 0x6c77e0, 0x1e4afa, 0x4b6efa, 0x879ced, 0x2c4ed4, 0x2c5fd4, 0x7994d4, 0x619efa, 0x8eb9fa, 0x327ded, 0x407bd4, 0x669dd4, 0x34abfa, 0x5cb3ed, 0x80bae0, 0x1989d4, 0x47bbed, 0x80c3e0, 0x61dbfa, 0x80cde0, 0x19aed4, 0x61ebfa, 0x19c1d4, 0x34fafa, 0x80e0e0, 0x8efaef, 0x1cedd8, 0x53d4c7, 0x8efada, 0x47edbb, 0x79d4b8, 0x66d4a8, 0x34fa97, 0x8efac4, 0x43e092, 0x1efa60, 0x2fe064, 0x80e09d, 0x87ed91, 0x2cd42c, 0x7eed72, 0x60fa1e, 0x87d466, 0xb9fa8e, 0x8fed32, 0x8ad440, 0xbdfa61, 0xafd479, 0xafed1c, 0xadd453, 0xe0fa78, 0xb2d42c, 0xe6fa34, 0xcbd479, 0xe0e02f, 0xe0e06c, 0xfae41e, 0xd4c119, 0xfad234, 0xfadb61, 0xd4b22c, 0xd4c179, 0xfab81e, 0xfada8e, 0xedc25c, 0xd49c19, 0xd4b366, 0xfaab34, 0xfabd61, 0xedc487, 0xd48919, 0xfab978, 0xed8f32, 0xe0b080, 0xd48a3f, 0xfa761e, 0xfab98e, 0xe0762f, 0xe08e58, 0xfa8f61, 0xed6a32, 0xeda687, 0xd46c3f, 0xfa4a1e, 0xed6847, 0xed8b72, 0xd43f19, 0xd48b79, 0xfa998e, 0xe05343, 0xfa1e1e, 0xfa6161, 0xd41919, 0xd46666];
var rainbowColors2 = [0xd62724, 0xd64b47, 0xbd3020, 0xbd4b3e, 0xe34327, 0xd65c47, 0xc94422, 0xbd583e, 0xe36e4b, 0xe35627, 0xc96942, 0xbd4f20, 0xe36527, 0xe37e4b, 0xc96222, 0xc97642, 0xe38a4b, 0xe37827, 0xbd753e, 0xbd6920, 0xe38227, 0xc98442, 0xe38b27, 0xc98d42, 0xbd7920, 0xd69f47, 0xd69524, 0xe3a727, 0xbd8b20, 0xe3b34b, 0xbd953e, 0xd6aa24, 0xe3c24b, 0xbda13e, 0xc9b022, 0xe3cd27, 0xc9bc42, 0xe3d94b, 0xe3e027, 0xc3c942, 0xd0e327, 0xbcd647, 0x9bbd20, 0xaee327, 0x9ac942, 0x89c922, 0x88e327, 0x7ee34b, 0x68bd3e, 0x4fbd20, 0x33d624, 0x4be353, 0x20bd38, 0x3ebd60, 0x27e378, 0x3ebd77, 0x27e394, 0x42c99a, 0x27e3a7];
var rainbowColors3 = [0x27e3ae, 0x20bd90, 0x4be3bd, 0x42c9ae, 0x27e3d6, 0x42c9c5, 0x4bd9e3, 0x3eb4bd, 0x47c3d6, 0x3ea8bd, 0x27c0e3, 0x209dbd, 0x47aed6, 0x2297c9, 0x2081bd, 0x2794e3, 0x479ad6, 0x278be3, 0x4284c9, 0x277be3, 0x427bc9, 0x2054bd, 0x426dc9, 0x4b76e3, 0x4761d6, 0x273de3, 0x2032bd, 0x3e4dbd, 0x4753d6, 0x504be3, 0x4b3ebd, 0x3e22c9, 0x5f27e3, 0x7b4be3, 0x6f3ebd, 0x6120bd, 0x8527e3, 0x7e20bd, 0x9342c9, 0xae4be3, 0x9e24d6, 0xac42c9, 0xbd27e3, 0xcc4be3, 0xad20bd, 0xd024d6, 0xbd3ebd, 0xe34bd4, 0xc922b6, 0xe327b1, 0xd647ae, 0xc92295, 0xbd3e90, 0xd6248c, 0xbd2074, 0xd64791, 0xe32782, 0xc9226d, 0xbd3e73, 0xe34b83, 0xe32769, 0xc9426d, 0xc92254, 0xe32756, 0xe34b6e, 0xc92241, 0xe32743, 0xc94257, 0xe32736, 0xbd202b, 0xd64750];
var redColors = [0xcf5140, 0xcf1e15, 0xcf5840, 0xcf3423, 0xcf2623, 0xcf2d15, 0xd14024, 0xd11406, 0xd12806, 0xd44b42, 0xd63633, 0xd64242, 0xd94d34, 0xd94534, 0xdb3e25, 0xde5445, 0xde5e45, 0xde2926, 0xde2307, 0xe00a07, 0xe02b16, 0xe33917, 0xe31a17, 0xe53a37, 0xe54727, 0xe84938, 0xe83827, 0xeb4e49, 0xed1e07, 0xed624a, 0xf0553a, 0xf04329, 0xf5604c, 0xf51c18, 0xf72d2a, 0xfa3c3c, 0xfc6b4e, 0xfc3c2b, 0xfc4d3d, 0xff5e3d, 0xff5e4f, 0xff3c1a, 0xff4f2b, 0xff554f, 0xff1c08];
var orangeColors = [0xd17d41, 0xed8e4a, 0xe08946, 0xf7974d, 0xd18241, 0xdb8b44, 0xf0974a, 0xffa44f, 0xcf8740, 0xe59647, 0xe59c47, 0xf7a84d, 0xd69442, 0xe5a147, 0xd19541, 0xf2ad4b, 0xe3a446, 0xd19a41, 0xffbc4f, 0xcf7332, 0xed8439, 0xff8e3d, 0xe08036, 0xcf7832, 0xf58e3b, 0xe58837, 0xcf7d32, 0xfc993d, 0xf0953a, 0xd68833, 0xed9939, 0xffa53d, 0xd48b33, 0xfca93d, 0xd18f32, 0xe59d37, 0xd49633, 0xeda839, 0xfcb33d, 0xfc822b, 0xcf6d23, 0xe07726, 0xeb8028, 0xde7c26, 0xff8e2b, 0xf28a29, 0xd17a24, 0xe38527, 0xf09029, 0xfc9b2b, 0xf09629, 0xfaa02a, 0xcf8723, 0xd99425, 0xf0a329, 0xcf6515, 0xe06e16, 0xfa8219, 0xcf6f15, 0xeb7e17, 0xfc8f19, 0xd67c15, 0xe08616, 0xd18015, 0xd98b16, 0xe59617, 0xfca519, 0xcf5a06, 0xed6707, 0xdb6307, 0xfc7208, 0xf07007, 0xfa7908, 0xcf6706, 0xe87407, 0xdb7407, 0xfa8508, 0xcf7106, 0xe58107, 0xf79307, 0xe88e07, 0xfa9d08];
var yellowColors = [0xe0bf46, 0xf0cf4a, 0xffdc4f, 0xcfb440, 0xdbc544, 0xebd249, 0xf2df4b, 0xd1c341, 0xe0d446, 0xfaee4d, 0xe8e348, 0xd6d943, 0xeff24b, 0xe7f54c, 0xe5c037, 0xf5cc3b, 0xd1b732, 0xe3c636, 0xf2d73a, 0xdbc835, 0xffec3d, 0xe5da37, 0xfaf03c, 0xd1cc32, 0xf5f53b, 0xc7d132, 0xd5e036, 0xebf73b, 0xcfa923, 0xf5d02a, 0xebd728, 0xe3e327, 0xcccf23, 0xdeb916, 0xe3c817, 0xd4cd15, 0xfcf519, 0xffff1a, 0xc1d115, 0xcdde16, 0xd1a506, 0xe0b107, 0xf0bd07, 0xffce08, 0xf0c507, 0xfcd808, 0xcfb406, 0xf2d707, 0xf7e307, 0xcfc106, 0xe5de07, 0xebeb07, 0xcfd606, 0xe7f207, 0xeaff08];
var greenColors = [0x9adb44, 0xa3f54c, 0x95e346, 0x85cf40, 0x8be848, 0x92fa4d, 0x78d141, 0x74db44, 0x83fc4e, 0x6ded4a, 0x61de45, 0x58cf40, 0x64fa4d, 0x4de848, 0x4efc5d, 0x4af05b, 0x41d156, 0x46e35e, 0x87d132, 0x96f73b, 0x7ee838, 0x6bde35, 0x5ecf32, 0x6df73b, 0x42d934, 0x32cf37, 0x33d44b, 0xa0fa2a, 0x8ee327, 0x80d624, 0x7df229, 0x69d124, 0x5bfa2a, 0x4de627, 0x35fa2a, 0x29f23a, 0x26de41, 0x85ff1a, 0x6eff1a, 0x60e817, 0x17e335, 0x81e607, 0x8af507, 0x65d907, 0x4ad106, 0x4aff08, 0x11d406, 0x0ee807, 0x08fc08, 0x06cf24];
var blueColors = [0x42bac9, 0x4bcfe3, 0x3eaabd, 0x20a0bd, 0x4bc7e3, 0x4bbfe3, 0x42a8c9, 0x2090bd, 0x4bb8e3, 0x3e99bd, 0x2295c9, 0x27a4e3, 0x4bb0e3, 0x2495d6, 0x207bbd, 0x3e86bd, 0x278be3, 0x4b99e3, 0x206ebd, 0x247ad6, 0x3e79bd, 0x277be3, 0x2064bd, 0x4b8ae3, 0x276fe3, 0x205cbd, 0x4274c9, 0x4b7be3, 0x275fe3, 0x426bc9, 0x244ed6, 0x4768d6, 0x3e58bd, 0x203abd, 0x243fd6, 0x4257c9, 0x4b5de3, 0x3e49bd, 0x2430d6, 0x202bbd, 0x272ae3, 0x4749d6];
var purpleColors = [0x8b27e3, 0x7420bd, 0x9c4be3, 0x823ebd, 0x8f42c9, 0x8422c9, 0x9b27e3, 0x8320bd, 0x8e3ebd, 0x9222c9, 0xa647d6, 0x9e24d6, 0xae27e3, 0x9020bd, 0x9b3ebd, 0xa842c9, 0xa222c9, 0xb024d6, 0xc24be3, 0xc427e3, 0xa320bd, 0xb022c9, 0xae3ebd, 0xd327e3, 0xb020bd, 0xd64be3, 0xbe22c9, 0xc042c9, 0xe327e3, 0xe34be3, 0xbd20ba, 0xbd3ebb, 0xd624cd, 0xd647cf, 0xc922bc, 0xbd20ad, 0xc942bc, 0xe327cd, 0xbd3eae, 0xe34bcf, 0xd624bc, 0xc942b1, 0xc922a8, 0xe34bc5, 0xbd3ea3];
var rainbowColors1 = [0xfa1e34, 0xfa6171, 0xd4192c, 0xd47982, 0xfa1e4a, 0xfa7892, 0xe02f53, 0xed87a6, 0xe05881, 0xd42c5f, 0xfa1e76, 0xfa619e, 0xe06c9a, 0xd42c6f, 0xfa8ec4, 0xed1c85, 0xfa4bb4, 0xe01b91, 0xd466a8, 0xfa78d3, 0xd440a7, 0xe01bb9, 0xe080cd, 0xe058d3, 0xfa61fa, 0xed1ced, 0xed87ed, 0xc119d4, 0xba53d4, 0xc54bfa, 0xaf1ced, 0xc380e0, 0xc678fa, 0x912cd4, 0xa866d4, 0x9c58e0, 0xb98efa, 0x7034fa, 0x7243e0, 0x9479d4, 0x9278fa, 0x7c66d4, 0x341efa, 0x7161fa, 0x998efa, 0x2f2fe0, 0x6c77e0, 0x1e4afa, 0x4b6efa, 0x879ced, 0x2c4ed4, 0x2c5fd4, 0x7994d4, 0x619efa, 0x8eb9fa, 0x327ded, 0x407bd4, 0x669dd4, 0x34abfa, 0x5cb3ed, 0x80bae0, 0x1989d4, 0x47bbed, 0x80c3e0, 0x61dbfa, 0x80cde0, 0x19aed4, 0x61ebfa, 0x19c1d4, 0x34fafa, 0x80e0e0, 0x8efaef, 0x1cedd8, 0x53d4c7, 0x8efada, 0x47edbb, 0x79d4b8, 0x66d4a8, 0x34fa97, 0x8efac4, 0x43e092, 0x1efa60, 0x2fe064, 0x80e09d, 0x87ed91, 0x2cd42c, 0x7eed72, 0x60fa1e, 0x87d466, 0xb9fa8e, 0x8fed32, 0x8ad440, 0xbdfa61, 0xafd479, 0xafed1c, 0xadd453, 0xe0fa78, 0xb2d42c, 0xe6fa34, 0xcbd479, 0xe0e02f, 0xe0e06c, 0xfae41e, 0xd4c119, 0xfad234, 0xfadb61, 0xd4b22c, 0xd4c179, 0xfab81e, 0xfada8e, 0xedc25c, 0xd49c19, 0xd4b366, 0xfaab34, 0xfabd61, 0xedc487, 0xd48919, 0xfab978, 0xed8f32, 0xe0b080, 0xd48a3f, 0xfa761e, 0xfab98e, 0xe0762f, 0xe08e58, 0xfa8f61, 0xed6a32, 0xeda687, 0xd46c3f, 0xfa4a1e, 0xed6847, 0xed8b72, 0xd43f19, 0xd48b79, 0xfa998e, 0xe05343, 0xfa1e1e, 0xfa6161, 0xd41919, 0xd46666];
var rainbowColors2 = [0xd62724, 0xd64b47, 0xbd3020, 0xbd4b3e, 0xe34327, 0xd65c47, 0xc94422, 0xbd583e, 0xe36e4b, 0xe35627, 0xc96942, 0xbd4f20, 0xe36527, 0xe37e4b, 0xc96222, 0xc97642, 0xe38a4b, 0xe37827, 0xbd753e, 0xbd6920, 0xe38227, 0xc98442, 0xe38b27, 0xc98d42, 0xbd7920, 0xd69f47, 0xd69524, 0xe3a727, 0xbd8b20, 0xe3b34b, 0xbd953e, 0xd6aa24, 0xe3c24b, 0xbda13e, 0xc9b022, 0xe3cd27, 0xc9bc42, 0xe3d94b, 0xe3e027, 0xc3c942, 0xd0e327, 0xbcd647, 0x9bbd20, 0xaee327, 0x9ac942, 0x89c922, 0x88e327, 0x7ee34b, 0x68bd3e, 0x4fbd20, 0x33d624, 0x4be353, 0x20bd38, 0x3ebd60, 0x27e378, 0x3ebd77, 0x27e394, 0x42c99a, 0x27e3a7];
var rainbowColors3 = [0x27e3ae, 0x20bd90, 0x4be3bd, 0x42c9ae, 0x27e3d6, 0x42c9c5, 0x4bd9e3, 0x3eb4bd, 0x47c3d6, 0x3ea8bd, 0x27c0e3, 0x209dbd, 0x47aed6, 0x2297c9, 0x2081bd, 0x2794e3, 0x479ad6, 0x278be3, 0x4284c9, 0x277be3, 0x427bc9, 0x2054bd, 0x426dc9, 0x4b76e3, 0x4761d6, 0x273de3, 0x2032bd, 0x3e4dbd, 0x4753d6, 0x504be3, 0x4b3ebd, 0x3e22c9, 0x5f27e3, 0x7b4be3, 0x6f3ebd, 0x6120bd, 0x8527e3, 0x7e20bd, 0x9342c9, 0xae4be3, 0x9e24d6, 0xac42c9, 0xbd27e3, 0xcc4be3, 0xad20bd, 0xd024d6, 0xbd3ebd, 0xe34bd4, 0xc922b6, 0xe327b1, 0xd647ae, 0xc92295, 0xbd3e90, 0xd6248c, 0xbd2074, 0xd64791, 0xe32782, 0xc9226d, 0xbd3e73, 0xe34b83, 0xe32769, 0xc9426d, 0xc92254, 0xe32756, 0xe34b6e, 0xc92241, 0xe32743, 0xc94257, 0xe32736, 0xbd202b, 0xd64750];

var colorArray = redColors;

var started = false;
var paused = false;
var source;

var parameters = {};

var xhr;

function normalize (value, max){
	return value/max;
}

function audioInit(){
	try {
		window.AudioContext = window.AudioContext || window.webkitAudioContext;
		audioContext = new window.AudioContext();
	} catch(e) {
		return;
	}
	window.addEventListener('touchstart', function() {
		/* create empty buffer */
		var buffer = audioContext.createBuffer(1, 1, 22050);
		var source = audioContext.createBufferSource();
		source.buffer = buffer;
		/* connect to output (your speakers) */
		source.connect(audioContext.destination);
		/* play the file */
		source.noteOn(0);
	}, false);
	analyser = audioContext.createAnalyser();
	analyser.smoothingTimeConstant = 0.01;
	analyser.fftSize = 1024;
	freqByteData = new Uint8Array(analyser.frequencyBinCount);
	timeByteData = new Uint8Array(analyser.frequencyBinCount);
}

$('#enter-link').click(function(){
	$('#prompt').html("<input id='youtube' type='text' placeholder='Enter a Youtube URL here...'>").show();
	fadePrompt();

});

var timer;
$(document).mousemove(function() {
	if (timer) {
		clearTimeout(timer);
		timer = 0;
	}

	$("#tools").fadeIn();
	timer = setTimeout(function() {
		$('#tools').fadeOut()
	}, 1500)
})

function fadePrompt(){
	setTimeout(function() {
		$('#prompt').fadeOut('slow');
	}, 10000);
}

function getURLParameter(url, name) {
	return (RegExp(name + '=' + '(.+?)(&|$)').exec(url)||[,null])[1];
}

function loading(){
	$('#prompt').text("loading").show();
	var i = 0;
	var interval = setInterval(function() {
		if($('#prompt').is(':hidden')) clearInterval(interval);
		if(i === 5){
			$('#prompt').text('loading');
			i = 0;
		}
		else{
			$('#prompt').append('.');
			i++;
		}
	}, 750);
}


function youtubeEntered(link){
	loading();
	window.location.href = link;

}

function youtubeEntered2(link){
	loading();
	var request = new XMLHttpRequest();
	request.open("GET", link, true);
	request.responseType = "arraybuffer";
	request.send();

	request.onload = function() {
		loadYoutube(getURLParameter(link, 'v'));
	};
}

function loadYoutube(link) {
	loading();
	var url = "public/" + link + ".mp4";
	console.log(url);
	var request = new XMLHttpRequest();
	request.open("GET", url, true);
	request.responseType = "arraybuffer";
	request.send();
	request.onload = function() {
		audioContext.decodeAudioData(request.response, function(buffer) {
			audioBuffer = buffer;
			startSound();
		}, function(e) {
			console.log(e);
		});
	};
};

function loadSampleAudio() {
	loading();
	var audioURL = "public/cohkka.mp3";

	/* Load asynchronously */
	var request = new XMLHttpRequest();
	request.open("GET", audioURL, true);
	request.responseType = "arraybuffer";

	request.onload = function() {
		audioContext.decodeAudioData(request.response, function(buffer) {
			audioBuffer = buffer;
			startSound();
		}, function(e) {
			$('#prompt').text("error loading mp3").show();
			console.log(e);
		});
	};
	request.send();
}

function onDocumentDragOver(evt) {
	evt.stopPropagation();
	evt.preventDefault();
	return false;
}

function onDroppedMP3Loaded(data) {
	audioContext.decodeAudioData(data, function(buffer) {
		audioBuffer = buffer;
		startSound();
	}, function(e) {
		$('#prompt').text("cannot decode mp3").show();
		console.log(e);
	});
}

function onMP3Drop(evt) {
	evt.stopPropagation();
	evt.preventDefault();

	loading();

	var droppedFiles = evt.dataTransfer.files;
	var reader = new FileReader();
	reader.onload = function(fileEvent) {
		var data = fileEvent.target.result;
		onDroppedMP3Loaded(data);
	};
	reader.readAsArrayBuffer(droppedFiles[0]);
}

function startSound() {

	if (source){
		source.stop(0.0);
		source.disconnect();
	}

	/* Connect audio processing graph */
	source = audioContext.createBufferSource();	
	source.connect(audioContext.destination);
	source.connect(analyser);

	$('#prompt').fadeOut('slow');
	source.buffer = audioBuffer;
	source.loop = false;
	source.start(0.0);
	started = true;
	console.log(source);
	/*startViz();*/
}

function pause(){
	paused = true;
	console.log(source);
	source.stop();
}

function play(){
	paused = false;
	source.start();
}
